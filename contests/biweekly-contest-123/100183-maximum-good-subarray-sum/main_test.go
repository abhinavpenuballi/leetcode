package main

import (
	"testing"
	"time"
)

func TestMaximumSubarraySum(t *testing.T) {
	timeout := time.After(2 * time.Second)

	done := make(chan bool)

	go func() {
		type maximumSubarraySumTest struct {
			arg1     []int
			arg2     int
			expected int64
		}

		maximumSubarraySumTests := []maximumSubarraySumTest{
			{[]int{1, 2, 3, 4, 5, 6}, 1, 11},
			{[]int{-1, 3, 2, 4, 5}, 3, 11},
			{[]int{-1, -2, -3, -4}, 2, -6},
			{[]int{1, 5}, 2, 0},
			{[]int{-952, 227, -537, 554, 172, 600, 536, 965, 353, 342, -921, -806, -906, 838, -713, -303, -752, 589, -755, -398, -169, 992, 861, -39, 914, -958, -37, -353, -661, 107, -843, 75, 78, 33, 284, -56, -590, -598, 822, -766, 528, -450, 502, 62, -401, -834, 139, 861, 794, -682, 734, -503, -915, -463, -986, 827, 771, -881, -970, -499, -981, -20, -144, -946, 575, 552, -18, 696, 216, 936, 623, -985, 244, 640, -94, -88, -876, 309, -698, 984, -142, 333, 540, -790, 377, -668, -991, 35, 661, 527, -397, 886, -754, -454, 413, -289, -850, -429, 568, -137, 480, -684, 204, 997, 995, 777, 459, 500, 512, 92, -718, -894, 61, 775, 238, 87, 506, 823, -976, 507, -817, 148, -266, 59, -52, 295, -858, 606, -100, 945, 533, -131, -133, -755, -399, -136, -671, 202, 700, 597, -991, -80, 43, -299, -276, -33, -425, -810, -862, -355, 811, 903, -666, -657, 383, -126, -264, 410, -444, 531, -118, -322, 998, 758, 958, -714, -873, 637, -213, -637, 156, 228, -726, 440, -462, -990, 916, -871, 334, -357, 827, 517, 420, -449, -427, 6, 70, 295, 943, 66, 16, -614, -774, -251, -952, -184, -991, -764, 402, -297, -624, 572, 81, 313, -275, -637, 686, -490, -461, 140, 776, -397, 743, 900, 566, -150, -13, 312, 92, 620, 637, -288, -735, -763, 880, 998, 218, -762, 229, 761, 264, -871, -54, 451, 332, 973, 553, 291, -402, -931, 578, 577, 562, -578, 952, -485, 240, -748, 358, -157, -49, 290, 575, -246, -72, 249, -391, -414, -746, -385, 645, -1000, -687, -283, 47, -72, -46, 228, -31, -140, -238, 584, 512, 561, -171, -686, 615, -11, 26, -917, 622, 56, -766, -866, 602, 124, 872, -248, -299, 822, -255, -848, -731, 193, 694, 244, 720, 668, -667, 599, 321, 40, 786, -965, 340, -711, -260, -631, -459, -878, 837, -726, -904, -906, 573, -399, 781, 672, 747, -560, -851, -324, -971, 755, 736, 167, 523, -485, 529, 384, -706, 584, -285, -103, 924, -464, 360, 882, 27, 27, -913, 784, 693, -890, -455, -905, -932, -193, 285, 714, -861, 345, 855, 742, -393, -562, 605, -155, 461, 485, 304, 628, 776, 205, 90, 729, 714, -629, 806, 984, 467, 365, -924, -705, 828, -552, -359, -315, 188, -36, -996, 886, 712, -345, 158, -159, -34, -104, 208, 209, 804, -996, -52, -176, -300, -99, 686, 527, 23, 969, 582, 99, 661, 542, 71, -183, 992, 795, 986, -874, -851, -615, -393, -646, 698, 919, 822, -133, 774, 324, -88, -93, -311, 5, 648, 872, -288, -852, -218, 876, -388, -821, -391, 678, 690, 205, -271, 741, -541, -857, 641, 193, 796, 612, 588, 522, -642, -558, 403, 344, -770, 904, -778, -531, -955, 519, -496, 546, 768, -758, -728, -13, 145, -720, 977, 427, -954, 533, 315, 714, -868, -744, -735, -149, 709, 408, 274, 901, 842, 999, 94, -42, 699, 274, -556, 798, 72, -662, 107, -208, -338, 282, -117, 985, 159, -713, 428, -308, 618, 473, -782, -16, 714, -484, -1000, 465, 658, -798, 744, 542, -39, 40, -995, 654, 928, 255, -337, 990, -314, 612, -31, -422, 675, -674, -986, 712, -140, 354, -597, -447, 414, -979, -749, -198, 839, -73, -346, 786, 848, 597, 649, 464, -519, 651, 986, 97, -24, -495, -828, -21, -618, 795, 886, -684, 844, 823, 743, 967, 30, 929, 47, 368, -474, 222, 491, -262, -986, 932, 962, 56, -276, -543, -79, 938, 809, 705, -443, 761, -496, -966, -62, 2, 58, 217, -400, -80, -314, 390, 44, -542, -119, 141, -68, 305, 174, -174, -230, -847, 101, 316, -602, 394, -620, -391, 690, 45, 200, 338, -699, 914, 252, -886, 63, 827, -853, -644, -812, 443, -44, 911, 794, -147, 221, 631, -695, -988, -519, -357, 495, -452, -527, 881, -226, 451, -384, 649, -369, -61, 295, -312, 646, 794, 520, -269, -466, -30, 167, -262, -288, -113, -360, -771, 990, 645, 997, 655, -733, -1, 865, 577, -685, -64, 724, -708, -339, 106, 768, 393, -271, -458, -668, 182, -843, -562, -241, 838, 116, -773, 239, 235, 268, 785, -50, 354, -566, 789, 132, -360, -622, 904, -522, 311, 437, 81, 851, -90, -188, -338, 110, 345, -284, -666, -173, 136, 568, -535, -609, -901, 133, 894, -882, -592, -691, 191, 204, -89, -117, 144, -830, 356, 173, -963, -80, 503, 222, 801, -658, 253, 457, 327, 109, 174, -470, -597, 736, -170, 988, 281, 226, 198, 818, 82, 674, 425, 255, -406, 96, 302, 618, 219, 479, -520, 57, -71, -49, -845, -151, 392, 318, -813, 929, -305, -443, -985, -681, -325, -486, 267, 888, -891, -947, 124, 492, 583, 876, 939, -721, 255, 102, 710, 800, 9, 230, -716, 486, 899, -593, 49, 270, -184, 2, -878, -86, 799, 431, -756, -831, 902, -399, -239, -384, -659, -670, -988, 751, -777, 264, -36, 198, 162, 864, 583, 764, 602, -81, 698, 802, -232, -745, 270, -946, -584, -645, -908, 543, 677, 621, -647, 169, -674, -171, 254, -126, -563, 786, 264, -352, 771, 550, -385, -998, 14, 232, 609, 221, -309, -359, -968, 759, 123, -650, 60, -558, 463, 121, 185, -559, 606, -768, -911, -461, 332, 891, -477, -140, -518, 516, 109, -75, -112, 268, 808, -631, -208, -747, 501, -388, 211, -608, 343, -430, 66, 275, 813, -975, -187, 905, 699, -147, 760, 8, -691, -525, -734, 392, 87, -374, 798, -805, 111, 347, 447, -933, -256, 673, 838, -220, -435, 1000, -779, -358, -128, -82, -505, 577, 299, 890, 16, 514, 890, 89, -340, -89, 354, -185, 467, -489, 896, 977, -930, 855, -913, 657, 925, -150, 559, 566, -750, -723, 890, -417, 277, 694, 633, 955, 636, -105, -134, 842, -358, 44, -65, 973, 807, -203, 761, 279, 847, -859, 216, 358, -880, -620, 678, -311, 967, -992, -628, -323, 308, 183, 732, 326, -303, 274, -617, 723, 291, -626, -867, 952, 142, -571, -498, 237, -112, -24, -561, 164, -521, -640, 464, 429, -232, 772, -548, 91, -405, -997, 995, 471, -145, 116, 619, -84, -946, -128, -703, 728, 187, -871, 626, 174, 178, 489, -587, -604, 893, 743, -491, 425, -1040}, 42, 38281},
		}

		for _, test := range maximumSubarraySumTests {
			if output := maximumSubarraySum(test.arg1, test.arg2); output != test.expected {
				t.Errorf("Output %v not equal to expected %v", output, test.expected)
			}
		}

		done <- true
	}()

	select {
	case <-timeout:
		t.Fatal("Time Limit Exceeded")
	case <-done:
	}
}
